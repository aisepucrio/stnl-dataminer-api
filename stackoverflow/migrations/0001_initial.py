# Generated by Django 5.1.8 on 2025-06-09 15:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='StackBadge',
            fields=[
                ('badge_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('badge_type', models.CharField(max_length=50)),
                ('rank', models.CharField(max_length=50)),
                ('link', models.URLField()),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'stack_badge',
            },
        ),
        migrations.CreateModel(
            name='StackCollective',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('link', models.URLField()),
                ('slug', models.CharField(max_length=255)),
                ('last_sync', models.BigIntegerField(default=1749484145)),
            ],
            options={
                'db_table': 'stack_collective',
            },
        ),
        migrations.CreateModel(
            name='StackQuestion',
            fields=[
                ('question_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('title', models.TextField(null=True)),
                ('body', models.TextField(null=True)),
                ('score', models.IntegerField(default=0)),
                ('view_count', models.IntegerField(default=0)),
                ('answer_count', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('up_vote_count', models.IntegerField(default=0)),
                ('down_vote_count', models.IntegerField(default=0)),
                ('is_answered', models.BooleanField(default=False)),
                ('creation_date', models.BigIntegerField(null=True)),
                ('content_license', models.CharField(max_length=50, null=True)),
                ('last_activity_date', models.BigIntegerField(null=True)),
                ('share_link', models.URLField(null=True)),
                ('body_markdown', models.TextField(null=True)),
                ('link', models.URLField(null=True)),
                ('favorite_count', models.IntegerField(default=0)),
                ('accepted_answer_id', models.BigIntegerField(null=True)),
                ('time_mined', models.BigIntegerField(default=1749484145, null=True)),
            ],
            options={
                'db_table': 'stack_question',
            },
        ),
        migrations.CreateModel(
            name='StackUser',
            fields=[
                ('user_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=255, null=True)),
                ('reputation', models.IntegerField(default=0)),
                ('profile_image', models.URLField(null=True)),
                ('user_type', models.CharField(max_length=50, null=True)),
                ('is_employee', models.BooleanField(default=False)),
                ('creation_date', models.BigIntegerField(null=True)),
                ('last_access_date', models.BigIntegerField(null=True)),
                ('last_modified_date', models.BigIntegerField(null=True)),
                ('link', models.URLField(null=True)),
                ('accept_rate', models.IntegerField(null=True)),
                ('about_me', models.TextField(null=True)),
                ('location', models.CharField(max_length=255, null=True)),
                ('website_url', models.URLField(null=True)),
                ('account_id', models.BigIntegerField(null=True)),
                ('badge_counts', models.JSONField(null=True)),
                ('collectives', models.JSONField(null=True)),
                ('view_count', models.IntegerField(default=0)),
                ('down_vote_count', models.IntegerField(default=0)),
                ('up_vote_count', models.IntegerField(default=0)),
                ('answer_count', models.IntegerField(default=0)),
                ('question_count', models.IntegerField(default=0)),
                ('reputation_change_year', models.IntegerField(default=0)),
                ('reputation_change_quarter', models.IntegerField(default=0)),
                ('reputation_change_month', models.IntegerField(default=0)),
                ('reputation_change_week', models.IntegerField(default=0)),
                ('reputation_change_day', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'stack_user',
            },
        ),
        migrations.CreateModel(
            name='StackQuestionTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stackquestion')),
            ],
            options={
                'db_table': 'stack_question_tag',
            },
        ),
        migrations.CreateModel(
            name='StackTag',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('has_synonyms', models.BooleanField(default=False)),
                ('is_moderator_only', models.BooleanField(default=False)),
                ('is_required', models.BooleanField(default=False)),
                ('count', models.IntegerField(default=0)),
                ('last_activity_date', models.BigIntegerField(null=True)),
                ('last_sync', models.BigIntegerField(default=1749484145)),
                ('questions', models.ManyToManyField(through='stackoverflow.StackQuestionTag', to='stackoverflow.stackquestion')),
            ],
            options={
                'db_table': 'stack_tag',
            },
        ),
        migrations.AddField(
            model_name='stackquestiontag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stacktag'),
        ),
        migrations.AddField(
            model_name='stackquestion',
            name='tags',
            field=models.ManyToManyField(through='stackoverflow.StackQuestionTag', to='stackoverflow.stacktag'),
        ),
        migrations.CreateModel(
            name='StackCollectiveTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stackcollective')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stacktag')),
            ],
            options={
                'db_table': 'stack_collective_tag',
                'unique_together': {('collective', 'tag')},
            },
        ),
        migrations.AddField(
            model_name='stackcollective',
            name='tags',
            field=models.ManyToManyField(through='stackoverflow.StackCollectiveTag', to='stackoverflow.stacktag'),
        ),
        migrations.AddField(
            model_name='stackquestion',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='stackoverflow.stackuser'),
        ),
        migrations.CreateModel(
            name='StackComment',
            fields=[
                ('comment_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('post_type', models.CharField(max_length=10)),
                ('post_id', models.BigIntegerField()),
                ('body', models.TextField()),
                ('score', models.IntegerField(default=0)),
                ('creation_date', models.BigIntegerField()),
                ('content_license', models.CharField(max_length=50)),
                ('edited', models.BooleanField(default=False)),
                ('body_markdown', models.TextField()),
                ('link', models.URLField()),
                ('time_mined', models.BigIntegerField(default=1749484145)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to='stackoverflow.stackuser')),
            ],
            options={
                'db_table': 'stack_comment',
            },
        ),
        migrations.CreateModel(
            name='StackCollectiveUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=50)),
                ('collective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stackcollective')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stackuser')),
            ],
            options={
                'db_table': 'stack_collective_user',
                'unique_together': {('collective', 'user')},
            },
        ),
        migrations.AddField(
            model_name='stackcollective',
            name='users',
            field=models.ManyToManyField(through='stackoverflow.StackCollectiveUser', to='stackoverflow.stackuser'),
        ),
        migrations.CreateModel(
            name='StackAnswer',
            fields=[
                ('answer_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('body', models.TextField()),
                ('score', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('up_vote_count', models.IntegerField(default=0)),
                ('down_vote_count', models.IntegerField(default=0)),
                ('is_accepted', models.BooleanField(default=False)),
                ('creation_date', models.BigIntegerField()),
                ('content_license', models.CharField(max_length=50, null=True)),
                ('last_activity_date', models.BigIntegerField()),
                ('share_link', models.URLField()),
                ('body_markdown', models.TextField()),
                ('link', models.URLField()),
                ('title', models.TextField()),
                ('time_mined', models.BigIntegerField(default=1749484145)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='stackoverflow.stackquestion')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answers', to='stackoverflow.stackuser')),
            ],
            options={
                'db_table': 'stack_answer',
            },
        ),
        migrations.CreateModel(
            name='StackUserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('award_count', models.IntegerField(default=1)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stackbadge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stackuser')),
            ],
            options={
                'db_table': 'stack_user_badge',
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.AddField(
            model_name='stackbadge',
            name='users',
            field=models.ManyToManyField(through='stackoverflow.StackUserBadge', to='stackoverflow.stackuser'),
        ),
        migrations.AlterUniqueTogether(
            name='stackquestiontag',
            unique_together={('question', 'tag')},
        ),
        migrations.CreateModel(
            name='StackTagSynonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synonym', models.CharField(max_length=255)),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stackoverflow.stacktag')),
            ],
            options={
                'db_table': 'stack_tag_synonym',
                'unique_together': {('tag', 'synonym')},
            },
        ),
    ]
