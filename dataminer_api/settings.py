"""
Django settings for dataminer_api project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4#0!#$y$nhi83cpx_+z+-0r=b@li^csxtj=7adx!js5_#d18bt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'drf_spectacular',
    'dataminer_api',
    'github',
    'jira',
    'jobs',
    'django_filters',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dataminer_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dataminer_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': 'db',
        'PORT': 5432,
    },
}

# Configurações do Jira
JIRA_EMAIL = os.getenv("JIRA_EMAIL")
JIRA_API_TOKEN = os.getenv("JIRA_API_TOKEN").strip('"')

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Diggit API',
    'DESCRIPTION': 'A Django-based API designed for mining and analyzing software development data.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Define a URL do broker (Redis) que o Celery usará para mensageria
CELERY_BROKER_URL = 'redis://redis:6379/0'

# Define onde os resultados das tarefas serão armazenados
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'

# Define quais formatos de serialização são aceitos para as mensagens
# Neste caso, apenas JSON é permitido
CELERY_ACCEPT_CONTENT = ['json']

# Define o serializador usado para as tarefas
CELERY_TASK_SERIALIZER = 'json'

# Define o serializador usado para os resultados
CELERY_RESULT_SERIALIZER = 'json'

# Define o fuso horário para o Celery
CELERY_TIMEZONE = 'UTC'

# Define quanto tempo os resultados das tarefas são mantidos
# Neste caso: 3 dias (60 segundos * 60 minutos * 24 horas * 3 dias)
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24 * 3

# Permite que o Celery tente reconectar ao broker em caso de falha durante o startup




























































CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# Habilita o rastreamento do estado "STARTED" das tarefas
CELERY_TASK_TRACK_STARTED = True

# Força o armazenamento dos resultados mesmo em modo eager (útil para testes)
CELERY_TASK_STORE_EAGER_RESULT = True

# Duplicata do CELERY_TASK_TRACK_STARTED (pode ser removido)
CELERY_TRACK_STARTED = True

# Define o limite máximo de memória por processo worker (2MB neste caso)
CELERY_MAX_MEMORY_PER_CHILD = 1024*1024*2

# Define o número de processos workers concorrentes
CELERY_CONCURRENCY = 4
