version: '3'

services: # Tenho 2 serviços, ou dois containers (instâncias de imagens) a serem criados.
  web: # CONTAINER do meu webapp django
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    #O comando especifica que o servidor Django deve ouvir na porta 7000 dentro do contêiner. 
    #Isso é a porta interna do contêiner onde o Django está ouvindo.
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    # Este mapeamento de portas faz com que a porta 7000 do contêiner seja exposta e mapeada para a porta 7000 no host. 
    # Isso significa que você pode acessar o serviço Django no http://localhost:7000 a partir do seu navegador ou 
    # ferramentas de teste, e a porta 7000 no contêiner será acessível através da mesma porta no host.
    depends_on: # É necessário que o banco de dados inicie antes do webapp, por isso informamos essa dependência.
      - db

  worker:
    build: .
    command: celery -A dataminer_api worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis

  redis:
    image: redis:latest
    ports:
      - "8001:6379"
    
# NETWORK
# VARIAVEIS DOCKER
  db: # CONTAINER do meu banco de dados postgreSQL
    image: postgres:13
    environment:
      POSTGRES_DB: mining_db
      POSTGRES_USER: aise-stone
      POSTGRES_PASSWORD: '#St@n3L@b2@24!'
    volumes:
      - postgres_data:/var/lib/postgresql/data/

volumes:
  postgres_data:
# Volumes são usados para armazenar dados gerados e utilizados por contêineres Docker. 
# Ao usar volumes, você pode manter dados persistentes além do ciclo de vida dos contêineres, 
# ou seja, caso um container dê problema ou deva ser reininciado, os dados não serão perdidos.