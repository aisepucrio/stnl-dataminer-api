[
    {
        "sha": "ae3156d7277366601e8e0cf321af710a1b0f202d",
        "message": "XYChart: Config cleanup and refactoring (#79915)\n\n* xy config cleanup\n\n* more cleanup\n\n* clean up betterer some\n\n---------\n\nCo-authored-by: nmarrs <nathanielmarrs@gmail.com>",
        "date": "2023-12-31T16:50:53-08:00",
        "author": {
            "name": "Ryan McKinley",
            "email": "ryantxu@gmail.com"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com"
        },
        "lines": {
            "insertions": 265,
            "deletions": 145,
            "files": 13
        },
        "in_main_branch": true,
        "merge": false,
        "dmm_unit_size": 1.0,
        "dmm_unit_complexity": 1.0,
        "dmm_unit_interfacing": 1.0,
        "modified_files": [
            {
                "old_path": ".betterer.results",
                "new_path": ".betterer.results",
                "filename": ".betterer.results",
                "change_type": "MODIFY",
                "diff": "@@ -6596,22 +6596,7 @@ exports[`better eslint`] = {\n       [0, 0, 0, \"Styles should be written using objects.\", \"2\"]\n     ],\n     \"public/app/plugins/panel/xychart/ManualEditor.tsx:5381\": [\n-      [0, 0, 0, \"Unexpected any. Specify a different type.\", \"0\"],\n-      [0, 0, 0, \"Unexpected any. Specify a different type.\", \"1\"],\n-      [0, 0, 0, \"Do not use any type assertions.\", \"2\"],\n-      [0, 0, 0, \"Unexpected any. Specify a different type.\", \"3\"],\n-      [0, 0, 0, \"Do not use any type assertions.\", \"4\"],\n-      [0, 0, 0, \"Unexpected any. Specify a different type.\", \"5\"],\n-      [0, 0, 0, \"Do not use any type assertions.\", \"6\"],\n-      [0, 0, 0, \"Unexpected any. Specify a different type.\", \"7\"],\n-      [0, 0, 0, \"Do not use any type assertions.\", \"8\"],\n-      [0, 0, 0, \"Unexpected any. Specify a different type.\", \"9\"],\n-      [0, 0, 0, \"Do not use any type assertions.\", \"10\"],\n-      [0, 0, 0, \"Unexpected any. Specify a different type.\", \"11\"],\n-      [0, 0, 0, \"Styles should be written using objects.\", \"12\"],\n-      [0, 0, 0, \"Styles should be written using objects.\", \"13\"],\n-      [0, 0, 0, \"Styles should be written using objects.\", \"14\"],\n-      [0, 0, 0, \"Styles should be written using objects.\", \"15\"]\n+      [0, 0, 0, \"Do not use any type assertions.\", \"0\"]\n     ],\n     \"public/app/plugins/panel/xychart/TooltipView.tsx:5381\": [\n       [0, 0, 0, \"Do not use any type assertions.\", \"0\"],\n",
                "added_lines": 1,
                "deleted_lines": 16,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "docs/sources/developers/kinds/composable/xychart/panelcfg/schema-reference.md",
                "new_path": "docs/sources/developers/kinds/composable/xychart/panelcfg/schema-reference.md",
                "filename": "schema-reference.md",
                "change_type": "MODIFY",
                "diff": "@@ -18,14 +18,14 @@ title: XYChartPanelCfg kind\n \n \n \n-| Property              | Type                           | Required | Default | Description                                             |\n-|-----------------------|--------------------------------|----------|---------|---------------------------------------------------------|\n-| `FieldConfig`         | [object](#fieldconfig)         | **Yes**  |         |                                                         |\n-| `Options`             | [object](#options)             | **Yes**  |         |                                                         |\n-| `ScatterSeriesConfig` | [object](#scatterseriesconfig) | **Yes**  |         |                                                         |\n-| `ScatterShow`         | string                         | **Yes**  |         | Possible values are: `points`, `lines`, `points+lines`. |\n-| `SeriesMapping`       | string                         | **Yes**  |         | Possible values are: `auto`, `manual`.                  |\n-| `XYDimensionConfig`   | [object](#xydimensionconfig)   | **Yes**  |         |                                                         |\n+| Property              | Type                           | Required | Default | Description                                                          |\n+|-----------------------|--------------------------------|----------|---------|----------------------------------------------------------------------|\n+| `FieldConfig`         | [object](#fieldconfig)         | **Yes**  |         |                                                                      |\n+| `Options`             | [object](#options)             | **Yes**  |         |                                                                      |\n+| `ScatterSeriesConfig` | [object](#scatterseriesconfig) | **Yes**  |         |                                                                      |\n+| `ScatterShow`         | string                         | **Yes**  |         | Possible values are: `points`, `lines`, `points+lines`.              |\n+| `SeriesMapping`       | string                         | **Yes**  |         | Auto is \"table\" in the UI<br/>Possible values are: `auto`, `manual`. |\n+| `XYDimensionConfig`   | [object](#xydimensionconfig)   | **Yes**  |         | Configuration for the Table/Auto mode                                |\n \n ### FieldConfig\n \n@@ -150,11 +150,11 @@ It extends [OptionsWithLegend](#optionswithlegend) and [OptionsWithTooltip](#opt\n \n | Property        | Type                                          | Required | Default | Description                                                                |\n |-----------------|-----------------------------------------------|----------|---------|----------------------------------------------------------------------------|\n-| `dims`          | [XYDimensionConfig](#xydimensionconfig)       | **Yes**  |         |                                                                            |\n+| `dims`          | [XYDimensionConfig](#xydimensionconfig)       | **Yes**  |         | Configuration for the Table/Auto mode                                      |\n | `legend`        | [VizLegendOptions](#vizlegendoptions)         | **Yes**  |         | *(Inherited from [OptionsWithLegend](#optionswithlegend))*<br/>TODO docs   |\n-| `series`        | [ScatterSeriesConfig](#scatterseriesconfig)[] | **Yes**  |         |                                                                            |\n+| `series`        | [ScatterSeriesConfig](#scatterseriesconfig)[] | **Yes**  |         | Manual Mode                                                                |\n | `tooltip`       | [VizTooltipOptions](#viztooltipoptions)       | **Yes**  |         | *(Inherited from [OptionsWithTooltip](#optionswithtooltip))*<br/>TODO docs |\n-| `seriesMapping` | string                                        | No       |         | Possible values are: `auto`, `manual`.                                     |\n+| `seriesMapping` | string                                        | No       |         | Auto is \"table\" in the UI<br/>Possible values are: `auto`, `manual`.       |\n \n ### OptionsWithLegend\n \n@@ -228,6 +228,8 @@ It extends [FieldConfig](#fieldconfig).\n \n ### XYDimensionConfig\n \n+Configuration for the Table/Auto mode\n+\n | Property  | Type     | Required | Default | Description                       |\n |-----------|----------|----------|---------|-----------------------------------|\n | `frame`   | integer  | **Yes**  |         | Constraint: `>=0 & <=2147483647`. |\n",
                "added_lines": 13,
                "deleted_lines": 11,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "packages/grafana-data/src/field/overrides/processors.ts",
                "new_path": "packages/grafana-data/src/field/overrides/processors.ts",
                "filename": "processors.ts",
                "change_type": "MODIFY",
                "diff": "@@ -174,6 +174,12 @@ export interface StatsPickerConfigSettings {\n   defaultStat?: string;\n }\n \n+export enum FieldNamePickerBaseNameMode {\n+  IncludeAll = 'all',\n+  ExcludeBaseNames = 'exclude',\n+  OnlyBaseNames = 'only',\n+}\n+\n export interface FieldNamePickerConfigSettings {\n   /**\n    * Function is a predicate, to test each element of the array.\n@@ -186,11 +192,16 @@ export interface FieldNamePickerConfigSettings {\n    */\n   noFieldsMessage?: string;\n \n-  /**addFieldNamePicker\n+  /**\n    * Sets the width to a pixel value.\n    */\n   width?: number;\n \n+  /**\n+   * Exclude names that can match a collection of values\n+   */\n+  baseNameMode?: FieldNamePickerBaseNameMode;\n+\n   /**\n    * Placeholder text to display when nothing is selected.\n    */\n",
                "added_lines": 12,
                "deleted_lines": 1,
                "complexity": 20,
                "methods": [
                    {
                        "name": "identityOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "numberOverrideProcessor",
                        "complexity": 3,
                        "max_nesting": null
                    },
                    {
                        "name": "displayNameOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "dataLinksOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "valueMappingsOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "getOptions?",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "selectOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "stringOverrideProcessor",
                        "complexity": 7,
                        "max_nesting": null
                    },
                    {
                        "name": "thresholdsOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "unitOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "booleanOverrideProcessor",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "filter?",
                        "complexity": 1,
                        "max_nesting": null
                    }
                ]
            },
            {
                "old_path": "packages/grafana-schema/src/raw/composable/xychart/panelcfg/x/XYChartPanelCfg_types.gen.ts",
                "new_path": "packages/grafana-schema/src/raw/composable/xychart/panelcfg/x/XYChartPanelCfg_types.gen.ts",
                "filename": "XYChartPanelCfg_types.gen.ts",
                "change_type": "MODIFY",
                "diff": "@@ -13,6 +13,9 @@ import * as common from '@grafana/schema';\n \n export const pluginVersion = \"10.3.0-pre\";\n \n+/**\n+ * Auto is \"table\" in the UI\n+ */\n export enum SeriesMapping {\n   Auto = 'auto',\n   Manual = 'manual',\n@@ -24,6 +27,9 @@ export enum ScatterShow {\n   PointsAndLines = 'points+lines',\n }\n \n+/**\n+ * Configuration for the Table/Auto mode\n+ */\n export interface XYDimensionConfig {\n   exclude?: Array<string>;\n   frame: number;\n@@ -57,7 +63,13 @@ export interface ScatterSeriesConfig extends FieldConfig {\n }\n \n export interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n+  /**\n+   * Table Mode (auto)\n+   */\n   dims: XYDimensionConfig;\n+  /**\n+   * Manual Mode\n+   */\n   series: Array<ScatterSeriesConfig>;\n   seriesMapping?: SeriesMapping;\n }\n",
                "added_lines": 12,
                "deleted_lines": 0,
                "complexity": 0,
                "methods": []
            },
            {
                "old_path": "packages/grafana-ui/src/components/MatchersUI/FieldNamePicker.tsx",
                "new_path": "packages/grafana-ui/src/components/MatchersUI/FieldNamePicker.tsx",
                "filename": "FieldNamePicker.tsx",
                "change_type": "MODIFY",
                "diff": "@@ -12,7 +12,7 @@ type Props = StandardEditorProps<string, FieldNamePickerConfigSettings>;\n export const FieldNamePicker = ({ value, onChange, context, item }: Props) => {\n   const settings: FieldNamePickerConfigSettings = item.settings ?? {};\n   const names = useFieldDisplayNames(context.data, settings?.filter);\n-  const selectOptions = useSelectOptions(names, value);\n+  const selectOptions = useSelectOptions(names, value, undefined, undefined, settings.baseNameMode);\n \n   const onSelectChange = useCallback(\n     (selection?: SelectableValue<string>) => {\n",
                "added_lines": 1,
                "deleted_lines": 1,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "packages/grafana-ui/src/components/MatchersUI/utils.ts",
                "new_path": "packages/grafana-ui/src/components/MatchersUI/utils.ts",
                "filename": "utils.ts",
                "change_type": "MODIFY",
                "diff": "@@ -1,6 +1,6 @@\n import { useMemo } from 'react';\n \n-import { DataFrame, Field, getFieldDisplayName, SelectableValue } from '@grafana/data';\n+import { DataFrame, Field, getFieldDisplayName, SelectableValue, FieldNamePickerBaseNameMode } from '@grafana/data';\n \n import { getFieldTypeIcon } from '../../types';\n \n@@ -74,7 +74,8 @@ export function useSelectOptions(\n   displayNames: FrameFieldsDisplayNames,\n   currentName?: string,\n   firstItem?: SelectableValue<string>,\n-  fieldType?: string\n+  fieldType?: string,\n+  baseNameMode?: FieldNamePickerBaseNameMode\n ): Array<SelectableValue<string>> {\n   return useMemo(() => {\n     let found = false;\n@@ -82,21 +83,8 @@ export function useSelectOptions(\n     if (firstItem) {\n       options.push(firstItem);\n     }\n-    for (const name of displayNames.display) {\n-      if (!found && name === currentName) {\n-        found = true;\n-      }\n-      const field = displayNames.fields.get(name);\n-      if (!fieldType || fieldType === field?.type) {\n-        options.push({\n-          value: name,\n-          label: name,\n-          icon: field ? getFieldTypeIcon(field) : undefined,\n-        });\n-      }\n-    }\n-    for (const name of displayNames.raw) {\n-      if (!displayNames.display.has(name)) {\n+    if (baseNameMode === FieldNamePickerBaseNameMode.OnlyBaseNames) {\n+      for (const name of displayNames.raw) {\n         if (!found && name === currentName) {\n           found = true;\n         }\n@@ -105,6 +93,34 @@ export function useSelectOptions(\n           label: `${name} (base field name)`,\n         });\n       }\n+    } else {\n+      for (const name of displayNames.display) {\n+        if (!found && name === currentName) {\n+          found = true;\n+        }\n+        const field = displayNames.fields.get(name);\n+        if (!fieldType || fieldType === field?.type) {\n+          options.push({\n+            value: name,\n+            label: name,\n+            icon: field ? getFieldTypeIcon(field) : undefined,\n+          });\n+        }\n+      }\n+\n+      if (baseNameMode !== FieldNamePickerBaseNameMode.ExcludeBaseNames) {\n+        for (const name of displayNames.raw) {\n+          if (!displayNames.display.has(name)) {\n+            if (!found && name === currentName) {\n+              found = true;\n+            }\n+            options.push({\n+              value: name,\n+              label: `${name} (base field name)`,\n+            });\n+          }\n+        }\n+      }\n     }\n \n     if (currentName && !found) {\n@@ -114,5 +130,5 @@ export function useSelectOptions(\n       });\n     }\n     return options;\n-  }, [displayNames, currentName, firstItem, fieldType]);\n+  }, [displayNames, currentName, firstItem, fieldType, baseNameMode]);\n }\n",
                "added_lines": 34,
                "deleted_lines": 18,
                "complexity": 10,
                "methods": [
                    {
                        "name": "frameHasName",
                        "complexity": 3,
                        "max_nesting": null
                    },
                    {
                        "name": "getFrameFieldsDisplayNames",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "useFieldDisplayNames",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "useMemo",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "{",
                        "complexity": 1,
                        "max_nesting": null
                    },
                    {
                        "name": "{",
                        "complexity": 3,
                        "max_nesting": null
                    }
                ]
            },
            {
                "old_path": "public/app/features/dimensions/editors/ColorDimensionEditor.tsx",
                "new_path": "public/app/features/dimensions/editors/ColorDimensionEditor.tsx",
                "filename": "ColorDimensionEditor.tsx",
                "change_type": "MODIFY",
                "diff": "@@ -1,7 +1,7 @@\n import { css } from '@emotion/css';\n import React, { useCallback } from 'react';\n \n-import { GrafanaTheme2, SelectableValue, StandardEditorProps } from '@grafana/data';\n+import { GrafanaTheme2, SelectableValue, StandardEditorProps, FieldNamePickerBaseNameMode } from '@grafana/data';\n import { ColorDimensionConfig } from '@grafana/schema';\n import { Select, ColorPicker, useStyles2 } from '@grafana/ui';\n import { useFieldDisplayNames, useSelectOptions } from '@grafana/ui/src/components/MatchersUI/utils';\n@@ -11,19 +11,30 @@ const fixedColorOption: SelectableValue<string> = {\n   value: '_____fixed_____',\n };\n \n-export const ColorDimensionEditor = (props: StandardEditorProps<ColorDimensionConfig>) => {\n-  const { value, context, onChange } = props;\n+interface ColorDimensionSettings {\n+  isClearable?: boolean;\n+  baseNameMode?: FieldNamePickerBaseNameMode;\n+  placeholder?: string;\n+}\n+\n+export const ColorDimensionEditor = (props: StandardEditorProps<ColorDimensionConfig, ColorDimensionSettings>) => {\n+  const { value, context, onChange, item } = props;\n \n   const defaultColor = 'dark-green';\n \n   const styles = useStyles2(getStyles);\n   const fieldName = value?.field;\n-  const isFixed = Boolean(!fieldName);\n+  const isFixed = value && Boolean(!fieldName) && value?.fixed;\n   const names = useFieldDisplayNames(context.data);\n-  const selectOptions = useSelectOptions(names, fieldName, fixedColorOption);\n+  const selectOptions = useSelectOptions(names, fieldName, fixedColorOption, undefined, item.settings?.baseNameMode);\n \n   const onSelectChange = useCallback(\n     (selection: SelectableValue<string>) => {\n+      if (!selection) {\n+        onChange(undefined);\n+        return;\n+      }\n+\n       const field = selection.value;\n       if (field && field !== fixedColorOption.value) {\n         onChange({\n@@ -61,10 +72,12 @@ export const ColorDimensionEditor = (props: StandardEditorProps<ColorDimensionCo\n           options={selectOptions}\n           onChange={onSelectChange}\n           noOptionsMessage=\"No fields found\"\n+          isClearable={item.settings?.isClearable}\n+          placeholder={item.settings?.placeholder}\n         />\n         {isFixed && (\n           <div className={styles.picker}>\n-            <ColorPicker color={value?.fixed ?? defaultColor} onChange={onColorChange} enableNamedColors={true} />\n+            <ColorPicker color={value?.fixed} onChange={onColorChange} enableNamedColors={true} />\n           </div>\n         )}\n       </div>\n",
                "added_lines": 19,
                "deleted_lines": 6,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "public/app/plugins/panel/xychart/AutoEditor.tsx",
                "new_path": "public/app/plugins/panel/xychart/AutoEditor.tsx",
                "filename": "AutoEditor.tsx",
                "change_type": "MODIFY",
                "diff": "@@ -15,7 +15,7 @@ import { XYDimensionConfig, Options } from './panelcfg.gen';\n \n interface XYInfo {\n   numberFields: Array<SelectableValue<string>>;\n-  xAxis: SelectableValue<string>;\n+  xAxis?: SelectableValue<string>;\n   yFields: Array<SelectableValue<boolean>>;\n }\n \n@@ -24,7 +24,7 @@ export const AutoEditor = ({ value, onChange, context }: StandardEditorProps<XYD\n     if (context?.data?.length) {\n       return context.data.map((f, idx) => ({\n         value: idx,\n-        label: getFrameDisplayName(f, idx),\n+        label: `${getFrameDisplayName(f, idx)} (index: ${idx}, rows: ${f.length})`,\n       }));\n     }\n     return [{ value: 0, label: 'First result' }];\n@@ -33,19 +33,15 @@ export const AutoEditor = ({ value, onChange, context }: StandardEditorProps<XYD\n   const dims = useMemo(() => getXYDimensions(value, context.data), [context.data, value]);\n \n   const info = useMemo(() => {\n-    const first = {\n-      label: '?',\n-      value: undefined, // empty\n-    };\n     const v: XYInfo = {\n-      numberFields: [first],\n+      numberFields: [],\n       yFields: [],\n       xAxis: value?.x\n         ? {\n             label: `${value.x} (Not found)`,\n             value: value.x, // empty\n           }\n-        : first,\n+        : undefined,\n     };\n     const frame = context.data ? context.data[value?.frame ?? 0] : undefined;\n     if (frame) {\n@@ -58,9 +54,6 @@ export const AutoEditor = ({ value, onChange, context }: StandardEditorProps<XYD\n             value: name,\n           };\n           v.numberFields.push(sel);\n-          if (first.label === '?') {\n-            first.label = `${name} (First)`;\n-          }\n           if (value?.x && name === value.x) {\n             v.xAxis = sel;\n           }\n@@ -79,7 +72,7 @@ export const AutoEditor = ({ value, onChange, context }: StandardEditorProps<XYD\n \n   const styles = useStyles2(getStyles);\n \n-  if (!context.data) {\n+  if (!context.data?.length) {\n     return <div>No data...</div>;\n   }\n \n@@ -87,24 +80,28 @@ export const AutoEditor = ({ value, onChange, context }: StandardEditorProps<XYD\n     <div>\n       <Field label={'Data'}>\n         <Select\n+          isClearable={true}\n           options={frameNames}\n-          value={frameNames.find((v) => v.value === value?.frame) ?? frameNames[0]}\n+          placeholder={frameNames[0].label}\n+          value={frameNames.find((v) => v.value === value?.frame)}\n           onChange={(v) => {\n             onChange({\n               ...value,\n-              frame: v.value!,\n+              frame: v?.value!,\n             });\n           }}\n         />\n       </Field>\n       <Field label={'X Field'}>\n         <Select\n+          isClearable={true}\n           options={info.numberFields}\n           value={info.xAxis}\n+          placeholder={`${info.numberFields?.[0].label} (First numeric)`}\n           onChange={(v) => {\n             onChange({\n               ...value,\n-              x: v.value,\n+              x: v?.value,\n             });\n           }}\n         />\n",
                "added_lines": 12,
                "deleted_lines": 15,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "public/app/plugins/panel/xychart/ManualEditor.tsx",
                "new_path": "public/app/plugins/panel/xychart/ManualEditor.tsx",
                "filename": "ManualEditor.tsx",
                "change_type": "MODIFY",
                "diff": "@@ -1,23 +1,27 @@\n import { css, cx } from '@emotion/css';\n import React, { useState, useEffect } from 'react';\n \n-import { GrafanaTheme2, StandardEditorProps } from '@grafana/data';\n-import { Button, Field, IconButton, useStyles2 } from '@grafana/ui';\n-import { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\n+import {\n+  GrafanaTheme2,\n+  StandardEditorProps,\n+  FieldNamePickerBaseNameMode,\n+  StandardEditorsRegistryItem,\n+} from '@grafana/data';\n+import { Button, IconButton, useStyles2 } from '@grafana/ui';\n import { LayerName } from 'app/core/components/Layers/LayerName';\n-import { ColorDimensionEditor, ScaleDimensionEditor } from 'app/features/dimensions/editors';\n \n+import { ScatterSeriesEditor } from './ScatterSeriesEditor';\n import { Options, ScatterSeriesConfig, defaultFieldConfig } from './panelcfg.gen';\n \n export const ManualEditor = ({\n   value,\n   onChange,\n   context,\n-}: StandardEditorProps<ScatterSeriesConfig[], any, Options>) => {\n+}: StandardEditorProps<ScatterSeriesConfig[], unknown, Options>) => {\n   const [selected, setSelected] = useState(0);\n   const style = useStyles2(getStyles);\n \n-  const onFieldChange = (val: any | undefined, index: number, field: string) => {\n+  const onFieldChange = (val: unknown | undefined, index: number, field: string) => {\n     onChange(\n       value.map((obj, i) => {\n         if (i === index) {\n@@ -32,7 +36,7 @@ export const ManualEditor = ({\n     onChange([\n       ...value,\n       {\n-        pointColor: {} as any,\n+        pointColor: undefined,\n         pointSize: defaultFieldConfig.pointSize,\n       },\n     ]);\n@@ -97,77 +101,58 @@ export const ManualEditor = ({\n       </div>\n \n       {selected >= 0 && value[selected] && (\n-        <>\n-          <div key={`series/${selected}`}>\n-            <Field label={'X Field'}>\n-              <FieldNamePicker\n-                value={value[selected].x ?? ''}\n-                context={context}\n-                onChange={(field) => onFieldChange(field, selected, 'x')}\n-                item={{} as any}\n-              />\n-            </Field>\n-            <Field label={'Y Field'}>\n-              <FieldNamePicker\n-                value={value[selected].y ?? ''}\n-                context={context}\n-                onChange={(field) => onFieldChange(field, selected, 'y')}\n-                item={{} as any}\n-              />\n-            </Field>\n-            <Field label={'Point color'}>\n-              <ColorDimensionEditor\n-                value={value[selected].pointColor!}\n-                context={context}\n-                onChange={(field) => onFieldChange(field, selected, 'pointColor')}\n-                item={{} as any}\n-              />\n-            </Field>\n-            <Field label={'Point size'}>\n-              <ScaleDimensionEditor\n-                value={value[selected].pointSize!}\n-                context={context}\n-                onChange={(field) => onFieldChange(field, selected, 'pointSize')}\n-                item={{ settings: { min: 1, max: 100 } } as any}\n-              />\n-            </Field>\n-          </div>\n-        </>\n+        <ScatterSeriesEditor\n+          key={`series/${selected}`}\n+          baseNameMode={FieldNamePickerBaseNameMode.ExcludeBaseNames}\n+          item={{} as StandardEditorsRegistryItem}\n+          context={context}\n+          value={value[selected]}\n+          onChange={(v) => {\n+            onChange(\n+              value.map((obj, i) => {\n+                if (i === selected) {\n+                  return v!;\n+                }\n+                return obj;\n+              })\n+            );\n+          }}\n+        />\n       )}\n     </>\n   );\n };\n \n const getStyles = (theme: GrafanaTheme2) => ({\n-  marginBot: css`\n-    margin-bottom: 20px;\n-  `,\n-  row: css`\n-    padding: ${theme.spacing(0.5, 1)};\n-    border-radius: ${theme.shape.radius.default};\n-    background: ${theme.colors.background.secondary};\n-    min-height: ${theme.spacing(4)};\n-    display: flex;\n-    align-items: center;\n-    justify-content: space-between;\n-    margin-bottom: 3px;\n-    cursor: pointer;\n+  marginBot: css({\n+    marginBottom: '20px',\n+  }),\n+  row: css({\n+    padding: `${theme.spacing(0.5, 1)}`,\n+    borderRadius: `${theme.shape.radius.default}`,\n+    background: `${theme.colors.background.secondary}`,\n+    minHeight: `${theme.spacing(4)}`,\n+    display: 'flex',\n+    alignItems: 'center',\n+    justifyContent: 'space-between',\n+    marginBottom: '3px',\n+    cursor: 'pointer',\n \n-    border: 1px solid ${theme.components.input.borderColor};\n-    &:hover {\n-      border: 1px solid ${theme.components.input.borderHover};\n-    }\n-  `,\n-  sel: css`\n-    border: 1px solid ${theme.colors.primary.border};\n-    &:hover {\n-      border: 1px solid ${theme.colors.primary.border};\n-    }\n-  `,\n-  actionIcon: css`\n-    color: ${theme.colors.text.secondary};\n-    &:hover {\n-      color: ${theme.colors.text};\n-    }\n-  `,\n+    border: `1px solid ${theme.components.input.borderColor}`,\n+    '&:hover': {\n+      border: `1px solid ${theme.components.input.borderHover}`,\n+    },\n+  }),\n+  sel: css({\n+    border: `1px solid ${theme.colors.primary.border}`,\n+    '&:hover': {\n+      border: `1px solid ${theme.colors.primary.border}`,\n+    },\n+  }),\n+  actionIcon: css({\n+    color: `${theme.colors.text.secondary}`,\n+    '&:hover': {\n+      color: `${theme.colors.text}`,\n+    },\n+  }),\n });\n",
                "added_lines": 58,
                "deleted_lines": 73,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": null,
                "new_path": "public/app/plugins/panel/xychart/ScatterSeriesEditor.tsx",
                "filename": "ScatterSeriesEditor.tsx",
                "change_type": "ADD",
                "diff": "@@ -0,0 +1,82 @@\n+import React from 'react';\n+\n+import { StandardEditorProps, FieldNamePickerBaseNameMode } from '@grafana/data';\n+import { Field } from '@grafana/ui';\n+import { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\n+import { ColorDimensionEditor, ScaleDimensionEditor } from 'app/features/dimensions/editors';\n+\n+import { Options, ScatterSeriesConfig } from './panelcfg.gen';\n+\n+export interface Props extends StandardEditorProps<ScatterSeriesConfig, unknown, Options> {\n+  baseNameMode: FieldNamePickerBaseNameMode;\n+}\n+\n+export const ScatterSeriesEditor = ({ value, onChange, context, baseNameMode }: Props) => {\n+  const onFieldChange = (val: unknown | undefined, field: string) => {\n+    onChange({ ...value, [field]: val });\n+  };\n+\n+  return (\n+    <div>\n+      <Field label={'X Field'}>\n+        <FieldNamePicker\n+          value={value.x ?? ''}\n+          context={context}\n+          onChange={(field) => onFieldChange(field, 'x')}\n+          item={{\n+            id: 'x',\n+            name: 'x',\n+            settings: {\n+              baseNameMode,\n+            },\n+          }}\n+        />\n+      </Field>\n+      <Field label={'Y Field'}>\n+        <FieldNamePicker\n+          value={value.y ?? ''}\n+          context={context}\n+          onChange={(field) => onFieldChange(field, 'y')}\n+          item={{\n+            id: 'x',\n+            name: 'x',\n+            settings: {\n+              baseNameMode,\n+            },\n+          }}\n+        />\n+      </Field>\n+      <Field label={'Point color'}>\n+        <ColorDimensionEditor\n+          value={value.pointColor!}\n+          context={context}\n+          onChange={(field) => onFieldChange(field, 'pointColor')}\n+          item={{\n+            id: 'x',\n+            name: 'x',\n+            settings: {\n+              baseNameMode,\n+              isClearable: true,\n+              placeholder: 'Use standard color scheme',\n+            },\n+          }}\n+        />\n+      </Field>\n+      <Field label={'Point size'}>\n+        <ScaleDimensionEditor\n+          value={value.pointSize!}\n+          context={context}\n+          onChange={(field) => onFieldChange(field, 'pointSize')}\n+          item={{\n+            id: 'x',\n+            name: 'x',\n+            settings: {\n+              min: 1,\n+              max: 100,\n+            },\n+          }}\n+        />\n+      </Field>\n+    </div>\n+  );\n+};\n",
                "added_lines": 82,
                "deleted_lines": 0,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "public/app/plugins/panel/xychart/module.tsx",
                "new_path": "public/app/plugins/panel/xychart/module.tsx",
                "filename": "module.tsx",
                "change_type": "MODIFY",
                "diff": "@@ -17,8 +17,8 @@ export const plugin = new PanelPlugin<Options, FieldConfig>(XYChartPanel2)\n         defaultValue: 'auto',\n         settings: {\n           options: [\n-            { value: 'auto', label: 'Auto', description: 'No changes to saved model since 8.0' },\n-            { value: 'manual', label: 'Manual' },\n+            { value: 'auto', label: 'Table', description: 'Plot values within a single table result' },\n+            { value: 'manual', label: 'Manual', description: 'Construct values from any result' },\n           ],\n         },\n       })\n",
                "added_lines": 2,
                "deleted_lines": 2,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "public/app/plugins/panel/xychart/panelcfg.cue",
                "new_path": "public/app/plugins/panel/xychart/panelcfg.cue",
                "filename": "panelcfg.cue",
                "change_type": "MODIFY",
                "diff": "@@ -25,10 +25,11 @@ composableKinds: PanelCfg: {\n \t\tschemas: [{\n \t\t\tversion: [0, 0]\n \t\t\tschema: {\n-\n+\t\t\t\t// Auto is \"table\" in the UI\n \t\t\t\tSeriesMapping: \"auto\" | \"manual\"                   @cuetsy(kind=\"enum\")\n \t\t\t\tScatterShow:   \"points\" | \"lines\" | \"points+lines\" @cuetsy(kind=\"enum\", memberNames=\"Points|Lines|PointsAndLines\")\n \n+\t\t\t\t// Configuration for the Table/Auto mode\n \t\t\t\tXYDimensionConfig: {\n \t\t\t\t\tframe: int32 & >=0\n \t\t\t\t\tx?:    string\n@@ -66,7 +67,11 @@ composableKinds: PanelCfg: {\n \t\t\t\t\tcommon.OptionsWithTooltip\n \n \t\t\t\t\tseriesMapping?: SeriesMapping\n-\t\t\t\t\tdims:           XYDimensionConfig\n+\n+\t\t\t\t\t// Table Mode (auto)\n+\t\t\t\t\tdims: XYDimensionConfig\n+\n+\t\t\t\t\t// Manual Mode\n \t\t\t\t\tseries: [...ScatterSeriesConfig]\n \t\t\t\t} @cuetsy(kind=\"interface\")\n \t\t\t}\n",
                "added_lines": 7,
                "deleted_lines": 2,
                "complexity": null,
                "methods": []
            },
            {
                "old_path": "public/app/plugins/panel/xychart/panelcfg.gen.ts",
                "new_path": "public/app/plugins/panel/xychart/panelcfg.gen.ts",
                "filename": "panelcfg.gen.ts",
                "change_type": "MODIFY",
                "diff": "@@ -10,6 +10,9 @@\n \n import * as common from '@grafana/schema';\n \n+/**\n+ * Auto is \"table\" in the UI\n+ */\n export enum SeriesMapping {\n   Auto = 'auto',\n   Manual = 'manual',\n@@ -21,6 +24,9 @@ export enum ScatterShow {\n   PointsAndLines = 'points+lines',\n }\n \n+/**\n+ * Configuration for the Table/Auto mode\n+ */\n export interface XYDimensionConfig {\n   exclude?: Array<string>;\n   frame: number;\n@@ -54,7 +60,13 @@ export interface ScatterSeriesConfig extends FieldConfig {\n }\n \n export interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n+  /**\n+   * Table Mode (auto)\n+   */\n   dims: XYDimensionConfig;\n+  /**\n+   * Manual Mode\n+   */\n   series: Array<ScatterSeriesConfig>;\n   seriesMapping?: SeriesMapping;\n }\n",
                "added_lines": 12,
                "deleted_lines": 0,
                "complexity": 0,
                "methods": []
            }
        ]
    }
]